interaction_model <- update(model, as.formula(paste(". ~ . +", interaction_term)))
interaction_test <- summary(interaction_model)
if (interaction_term %in% rownames(interaction_test$coefficients)) {
interaction_p_value <- interaction_test$coefficients[interaction_term, "Pr(>|t|)"]
interaction_result <- sprintf("Homogeneity of Slopes (Interaction) Test for %s and %s: p-value = %.4f",
factor, covariate, interaction_p_value)
} else {
interaction_result <- sprintf("Interaction term %s not significant or not included in model.", interaction_term)
}
# 2. Independence of Covariate and Factor
# We need to ensure that the covariate is treated as numeric if it is.
if (is.numeric(data[[covariate]])) {
independence_test <- aov(as.formula(paste(covariate, "~", factor)), data = data)
independence_test_result <- summary(independence_test)[[1]][["Pr(>F)"]][1]
independence_result <- sprintf("Independence of Covariate and Factor (ANOVA) Test for %s and %s: p-value = %.4f",
covariate, factor, independence_test_result)
} else {
independence_result <- sprintf("Covariate %s is not numeric, skipped independence check for %s.", covariate, factor)
}
# Collect results
ancova_checks <- c(ancova_checks, list(interaction_result, independence_result))
}
}
# Print ANCOVA assumption check results
cat("Additional Assumption Checks for ANCOVA:\n")
cat("----------------------------------------\n")
for (check in ancova_checks) {
cat(check, "\n")
}
}
check_ancova_assumptions(lm(hamd17_total_pre ~ fundamental_frequency_mean + sex + age_screening + age_learned_english+testing_location, data = WL_full_jou_bl), WL_full_jou_bl)
library(car)
library(ggpubr)
check_ancova_assumptions <- function(model, data) {
# Ensure the input model is of class 'lm'
if (!inherits(model, "lm")) {
stop("The input model must be of class 'lm'.")
}
# Extract the terms from the model
terms_info <- terms(model)
response_var <- as.character(attr(terms_info, "variables")[-1][attr(terms_info, "response")])
variables <- attr(terms_info, "term.labels")
# Identify factors and covariates used in the model
factors <- variables[sapply(variables, function(v) is.factor(data[[v]]))]
covariates <- variables[!variables %in% factors]
ancova_checks <- list()
for (covariate in covariates) {
for (factor in factors) {
# 1. Homogeneity of Regression Slopes
interaction_term <- paste(factor, covariate, sep = ":")
interaction_model <- update(model, as.formula(paste(". ~ . +", interaction_term)))
interaction_test <- summary(interaction_model)
if (interaction_term %in% rownames(interaction_test$coefficients)) {
interaction_p_value <- interaction_test$coefficients[interaction_term, "Pr(>|t|)"]
interaction_result <- sprintf("Homogeneity of Slopes (Interaction) Test for %s and %s: p-value = %.4f",
factor, covariate, interaction_p_value)
} else {
interaction_result <- sprintf("Interaction term %s not significant or not included in model.", interaction_term)
}
# 2. Independence of Covariate and Factor
if (is.numeric(data[[covariate]])) {
independence_test <- aov(as.formula(paste(covariate, "~", factor)), data = data)
independence_test_result <- summary(independence_test)[[1]][["Pr(>F)"]][1]
independence_result <- sprintf("Independence of Covariate and Factor (ANOVA) Test for %s and %s: p-value = %.4f",
covariate, factor, independence_test_result)
} else {
independence_result <- sprintf("Covariate %s is not numeric, skipped independence check for %s.", covariate, factor)
}
# Collect results
ancova_checks <- c(ancova_checks, list(interaction_result, independence_result))
}
}
# Print ANCOVA assumption check results
cat("Additional Assumption Checks for ANCOVA:\n")
cat("----------------------------------------\n")
for (check in ancova_checks) {
cat(check, "\n")
}
}
# Example usage:
model <- lm(hamd17_total_pre ~ fundamental_frequency_mean + sex + age_screening + age_learned_english + testing_location, data = WL_full_jou_bl)
check_ancova_assumptions(model, WL_full_jou_bl)
library(car)
library(ggpubr)
check_ancova_assumptions <- function(model, data) {
# Ensure the input model is of class 'lm'
if (!inherits(model, "lm")) {
stop("The input model must be of class 'lm'.")
}
# Extract the terms from the model
terms_info <- terms(model)
response_var <- as.character(attr(terms_info, "variables")[-1][attr(terms_info, "response")])
variables <- attr(terms_info, "term.labels")
cat("Model Terms:\n")
cat("Response Variable: ", response_var, "\n")
cat("Explanatory Variables: ", paste(variables, collapse = ", "), "\n\n")
# Identify factors and covariates used in the model
factors <- variables[sapply(variables, function(v) is.factor(data[[v]]))]
covariates <- variables[!variables %in% factors]
cat("Identified Factors: ", paste(factors, collapse = ", "), "\n")
cat("Identified Covariates: ", paste(covariates, collapse = ", "), "\n\n")
ancova_checks <- list()
for (covariate in covariates) {
for (factor in factors) {
cat("Checking interactions between ", factor, " and ", covariate, "\n", sep = "")
# 1. Homogeneity of Regression Slopes
interaction_term <- paste(factor, covariate, sep = ":")
interaction_model <- update(model, as.formula(paste(". ~ . +", interaction_term)))
interaction_test <- summary(interaction_model)
if (interaction_term %in% rownames(interaction_test$coefficients)) {
interaction_p_value <- interaction_test$coefficients[interaction_term, "Pr(>|t|)"]
interaction_result <- sprintf("Homogeneity of Slopes (Interaction) Test for %s and %s: p-value = %.4f",
factor, covariate, interaction_p_value)
} else {
interaction_result <- sprintf("Interaction term %s not significant or not included in model.", interaction_term)
}
# 2. Independence of Covariate and Factor
if (is.numeric(data[[covariate]])) {
independence_test <- aov(as.formula(paste(covariate, "~", factor)), data = data)
independence_test_result <- summary(independence_test)[[1]][["Pr(>F)"]][1]
independence_result <- sprintf("Independence of Covariate and Factor (ANOVA) Test for %s and %s: p-value = %.4f",
covariate, factor, independence_test_result)
} else {
independence_result <- sprintf("Covariate %s is not numeric, skipped independence check for %s.", covariate, factor)
}
# Collect results
ancova_checks <- c(ancova_checks, list(interaction_result, independence_result))
# Print the current check results
cat(interaction_result, "\n")
cat(independence_result, "\n\n")
}
}
# Print ANCOVA assumption check results
cat("Additional Assumption Checks for ANCOVA:\n")
cat("----------------------------------------\n")
for (check in ancova_checks) {
cat(check, "\n")
}
}
# Example usage:
model <- lm(hamd17_total_pre ~ fundamental_frequency_mean + sex + age_screening + age_learned_english + testing_location, data = WL_full_jou_bl)
check_ancova_assumptions(model, WL_full_jou_bl)
library(car)
library(ggpubr)
check_ancova_assumptions <- function(model, data) {
# Ensure the input model is of class 'lm'
if (!inherits(model, "lm")) {
stop("The input model must be of class 'lm'.")
}
# Extract the terms from the model
terms_info <- terms(model)
response_var <- as.character(attr(terms_info, "variables")[-1][attr(terms_info, "response")])
variables <- attr(terms_info, "term.labels")
cat("Model Terms:\n")
cat("Response Variable: ", response_var, "\n")
cat("Explanatory Variables: ", paste(variables, collapse = ", "), "\n\n")
# Identify factors and covariates used in the model
factors <- variables[sapply(variables, function(v) is.factor(data[[v]]) || is.character(data[[v]]))]
covariates <- variables[!variables %in% factors]
cat("Identified Factors: ", paste(factors, collapse = ", "), "\n")
cat("Identified Covariates: ", paste(covariates, collapse = ", "), "\n\n")
ancova_checks <- list()
for (covariate in covariates) {
for (factor in factors) {
cat("Checking interactions between ", factor, " and ", covariate, "\n", sep = "")
# 1. Homogeneity of Regression Slopes
interaction_term <- paste(factor, covariate, sep = ":")
interaction_model <- update(model, as.formula(paste(". ~ . +", interaction_term)))
interaction_test <- summary(interaction_model)
if (interaction_term %in% rownames(interaction_test$coefficients)) {
interaction_p_value <- interaction_test$coefficients[interaction_term, "Pr(>|t|)"]
interaction_result <- sprintf("Homogeneity of Slopes (Interaction) Test for %s and %s: p-value = %.4f",
factor, covariate, interaction_p_value)
} else {
interaction_result <- sprintf("Interaction term %s not significant or not included in model.", interaction_term)
}
# 2. Independence of Covariate and Factor
if (is.numeric(data[[covariate]])) {
independence_test <- aov(as.formula(paste(covariate, "~", factor)), data = data)
independence_test_result <- summary(independence_test)[[1]][["Pr(>F)"]][1]
independence_result <- sprintf("Independence of Covariate and Factor (ANOVA) Test for %s and %s: p-value = %.4f",
covariate, factor, independence_test_result)
} else {
independence_result <- sprintf("Covariate %s is not numeric, skipped independence check for %s.", covariate, factor)
}
# Collect results
ancova_checks <- c(ancova_checks, list(interaction_result, independence_result))
# Print the current check results
cat(interaction_result, "\n")
cat(independence_result, "\n\n")
}
}
# Print ANCOVA assumption check results
cat("Additional Assumption Checks for ANCOVA:\n")
cat("----------------------------------------\n")
for (check in ancova_checks) {
cat(check, "\n")
}
}
# Example usage:
model <- lm(hamd17_total_pre ~ fundamental_frequency_mean + sex + age_screening + age_learned_english + testing_location, data = WL_full_jou_bl)
check_ancova_assumptions(model, WL_full_jou_bl)
# Function to check linear regression assumptions
check_regression_assumptions <- function(model) {
# Ensure the input model is of class 'lm'
if (!inherits(model, "lm")) {
stop("The input model must be of class 'lm'.")
}
# 1. Linearity - Residuals vs Fitted plot
linearity_plot <- ggplot(data = model, aes(.fitted, .resid)) +
geom_point(color = "#800099") +
geom_smooth(method = "loess", color = "red", se = FALSE) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(x = "Fitted values", y = "Residuals") +
ggtitle("Residuals vs Fitted") +
theme_minimal()
# 2. Homoscedasticity - Breusch-Pagan test
bp_test <- bptest(model)
bp_test_result <- sprintf("Breusch-Pagan test: p-value = %.4f", bp_test$p.value)
# 3. Independence - Durbin-Watson test
dw_test <- durbinWatsonTest(model)
dw_test_result <- sprintf("Durbin-Watson test: statistic = %.4f, p-value = %.4f",
dw_test$statistic, dw_test$p)
# 4. Normality - Q-Q plot and Shapiro-Wilk test
qq_plot <- ggplot(data = model, aes(sample = .resid)) +
stat_qq(color = "#800099") +
stat_qq_line(color = "red") +
ggtitle("Normal Q-Q Plot") +
theme_minimal()
shapiro_test <- shapiro.test(model$residuals)
shapiro_test_result <- sprintf("Shapiro-Wilk test: W = %.4f, p-value = %.4f",
shapiro_test$statistic, shapiro_test$p.value)
# 5. Multicollinearity - Variance Inflation Factor (VIF)
vif_values <- vif(model)
vif_results <- as.data.frame(vif_values)
colnames(vif_results) <- "VIF"
# Print results
cat("Assumption Checks for Linear Regression:\n")
cat("---------------------------------------\n")
cat(bp_test_result, "\n")
cat(dw_test_result, "\n")
cat(shapiro_test_result, "\n")
cat("VIF Values:\n")
print(vif_results)
# Plot diagnostic plots
plot_list <- list(linearity_plot, qq_plot)
ggarrange(plotlist = plot_list, ncol = 2, nrow = 1)
}
check_regression_assumptions(lm(hamd17_total_pre ~ fundamental_frequency_mean + sex + age_screening + age_learned_english, data = WL_full_jou_bl))
library(car)
library(ggpubr)
# Function to check linear regression assumptions
check_regression_assumptions <- function(model) {
# Ensure the input model is of class 'lm'
if (!inherits(model, "lm")) {
stop("The input model must be of class 'lm'.")
}
# 1. Linearity - Residuals vs Fitted plot
linearity_plot <- ggplot(data = model, aes(.fitted, .resid)) +
geom_point(color = "#800099") +
geom_smooth(method = "loess", color = "red", se = FALSE) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(x = "Fitted values", y = "Residuals") +
ggtitle("Residuals vs Fitted") +
theme_minimal()
# 2. Homoscedasticity - Breusch-Pagan test
bp_test <- bptest(model)
bp_test_result <- sprintf("Breusch-Pagan test: p-value = %.4f", bp_test$p.value)
# 3. Independence - Durbin-Watson test
dw_test <- durbinWatsonTest(model)
dw_test_result <- sprintf("Durbin-Watson test: statistic = %.4f, p-value = %.4f",
dw_test$statistic, dw_test$p)
# 4. Normality - Q-Q plot and Shapiro-Wilk test
qq_plot <- ggplot(data = model, aes(sample = .resid)) +
stat_qq(color = "#800099") +
stat_qq_line(color = "red") +
ggtitle("Normal Q-Q Plot") +
theme_minimal()
shapiro_test <- shapiro.test(model$residuals)
shapiro_test_result <- sprintf("Shapiro-Wilk test: W = %.4f, p-value = %.4f",
shapiro_test$statistic, shapiro_test$p.value)
# 5. Multicollinearity - Variance Inflation Factor (VIF)
vif_values <- vif(model)
vif_results <- as.data.frame(vif_values)
colnames(vif_results) <- "VIF"
# Print results
cat("Assumption Checks for Linear Regression:\n")
cat("---------------------------------------\n")
cat(bp_test_result, "\n")
cat(dw_test_result, "\n")
cat(shapiro_test_result, "\n")
cat("VIF Values:\n")
print(vif_results)
# Plot diagnostic plots
plot_list <- list(linearity_plot, qq_plot)
ggarrange(plotlist = plot_list, ncol = 2, nrow = 1)
}
check_regression_assumptions(lm(hamd17_total_pre ~ fundamental_frequency_mean + sex + age_screening + age_learned_english, data = WL_full_jou_bl))
library(car)
library(ggpubr)
library(lmtest)
check_regression_assumptions(lm(hamd17_total_pre ~ fundamental_frequency_mean + sex + age_screening + age_learned_english, data = WL_full_jou_bl))
library(car)
library(ggpubr)
library(lmtest)
# Function to check linear regression assumptions
check_regression_assumptions <- function(model) {
# Ensure the input model is of class 'lm'
if (!inherits(model, "lm")) {
stop("The input model must be of class 'lm'.")
}
# 1. Linearity - Residuals vs Fitted plot
linearity_plot <- ggplot(data = model, aes(.fitted, .resid)) +
geom_point(color = "#800099") +
geom_smooth(method = "lm", color = "red", se = FALSE) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(x = "Fitted values", y = "Residuals") +
ggtitle("Residuals vs Fitted") +
theme_minimal()
# 2. Homoscedasticity - Breusch-Pagan test
bp_test <- bptest(model)
bp_test_result <- sprintf("Breusch-Pagan test: p-value = %.4f", bp_test$p.value)
# 3. Independence - Durbin-Watson test
dw_test <- durbinWatsonTest(model)
dw_test_result <- sprintf("Durbin-Watson test: statistic = %.4f, p-value = %.4f",
dw_test$statistic, dw_test$p)
# 4. Normality - Q-Q plot and Shapiro-Wilk test
qq_plot <- ggplot(data = model, aes(sample = .resid)) +
stat_qq(color = "#800099") +
stat_qq_line(color = "red") +
ggtitle("Normal Q-Q Plot") +
theme_minimal()
shapiro_test <- shapiro.test(model$residuals)
shapiro_test_result <- sprintf("Shapiro-Wilk test: W = %.4f, p-value = %.4f",
shapiro_test$statistic, shapiro_test$p.value)
# 5. Multicollinearity - Variance Inflation Factor (VIF)
vif_values <- vif(model)
vif_results <- as.data.frame(vif_values)
colnames(vif_results) <- "VIF"
# Print results
cat("Assumption Checks for Linear Regression:\n")
cat("---------------------------------------\n")
cat(bp_test_result, "\n")
cat(dw_test_result, "\n")
cat(shapiro_test_result, "\n")
cat("VIF Values:\n")
print(vif_results)
# Plot diagnostic plots
plot_list <- list(linearity_plot, qq_plot)
ggarrange(plotlist = plot_list, ncol = 2, nrow = 1)
}
check_regression_assumptions(lm(hamd17_total_pre ~ fundamental_frequency_mean + sex + age_screening + age_learned_english, data = WL_full_jou_bl))
# Function to check linear regression assumptions
check_regression_assumptions <- function(model) {
# Ensure the input model is of class 'lm'
if (!inherits(model, "lm")) {
stop("The input model must be of class 'lm'.")
}
# 1. Linearity - Residuals vs Fitted plot
linearity_plot <- ggplot(data = model, aes(.fitted, .resid)) +
geom_point(color = "#800099") +
geom_smooth(method = "loess", color = "red", se = FALSE) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(x = "Fitted values", y = "Residuals") +
ggtitle("Residuals vs Fitted") +
theme_minimal()
# 2. Homoscedasticity - Breusch-Pagan test
bp_test <- bptest(model)
bp_test_result <- sprintf("Breusch-Pagan test: p-value = %.4f", bp_test$p.value)
# 3. Independence - Durbin-Watson test
dw_test <- durbinWatsonTest(model)
dw_test_result <- sprintf("Durbin-Watson test: statistic = %.4f, p-value = %.4f",
dw_test$statistic, dw_test$p)
# 4. Normality - Q-Q plot and Shapiro-Wilk test
qq_plot <- ggplot(data = model, aes(sample = .resid)) +
stat_qq(color = "#800099") +
stat_qq_line(color = "red") +
ggtitle("Normal Q-Q Plot") +
theme_minimal()
shapiro_test <- shapiro.test(model$residuals)
shapiro_test_result <- sprintf("Shapiro-Wilk test: W = %.4f, p-value = %.4f",
shapiro_test$statistic, shapiro_test$p.value)
# 5. Multicollinearity - Variance Inflation Factor (VIF)
vif_values <- vif(model)
vif_results <- as.data.frame(vif_values)
colnames(vif_results) <- "VIF"
diag.plots <-plot(model)
# Print results
cat("Assumption Checks for Linear Regression:\n")
cat("---------------------------------------\n")
cat(bp_test_result, "\n")
cat(dw_test_result, "\n")
cat(shapiro_test_result, "\n")
cat("VIF Values:\n")
print(vif_results)
print(diag.plots)
# Plot diagnostic plots
plot_list <- list(linearity_plot, qq_plot)
ggarrange(plotlist = plot_list, ncol = 2, nrow = 1)
}
check_regression_assumptions(lm(hamd17_total_pre ~ fundamental_frequency_mean + sex + age_screening + age_learned_english, data = WL_full_jou_bl))
library(car)
library(ggpubr)
library(lmtest)
# Function to check linear regression assumptions
check_regression_assumptions <- function(model) {
# Ensure the input model is of class 'lm'
if (!inherits(model, "lm")) {
stop("The input model must be of class 'lm'.")
}
# 1. Linearity - Residuals vs Fitted plot
linearity_plot <- ggplot(data = model, aes(.fitted, .resid)) +
geom_point(color = "#800099") +
geom_smooth(method = "loess", color = "red", se = FALSE) +
geom_hline(yintercept = 0, linetype = "dashed", color = "red") +
labs(x = "Fitted values", y = "Residuals") +
ggtitle("Residuals vs Fitted") +
theme_minimal()
# 2. Homoscedasticity - Breusch-Pagan test
bp_test <- bptest(model)
bp_test_result <- sprintf("Breusch-Pagan test: p-value = %.4f", bp_test$p.value)
# 3. Independence - Durbin-Watson test
dw_test <- durbinWatsonTest(model)
dw_test_result <- sprintf("Durbin-Watson test: statistic = %.4f, p-value = %.4f",
dw_test$statistic, dw_test$p)
# 4. Normality - Q-Q plot and Shapiro-Wilk test
qq_plot <- ggplot(data = model, aes(sample = .resid)) +
stat_qq(color = "#800099") +
stat_qq_line(color = "red") +
ggtitle("Normal Q-Q Plot") +
theme_minimal()
shapiro_test <- shapiro.test(model$residuals)
shapiro_test_result <- sprintf("Shapiro-Wilk test: W = %.4f, p-value = %.4f",
shapiro_test$statistic, shapiro_test$p.value)
diag.plots <-plot(model)
# Print results
cat("Assumption Checks for Linear Regression:\n")
cat("---------------------------------------\n")
cat(bp_test_result, "\n")
cat(dw_test_result, "\n")
cat(shapiro_test_result, "\n")
print(diag.plots)
# Plot diagnostic plots
plot_list <- list(linearity_plot, qq_plot)
ggarrange(plotlist = plot_list, ncol = 2, nrow = 1)
}
check_regression_assumptions(lm(hamd17_total_pre ~ fundamental_frequency_variance + sex + age_screening + age_learned_english, data = WL_full_jou_bl))
check_regression_assumptions(lm(hamd17_total_pre ~ fundamental_frequency_mean + sex + age_screening + age_learned_english, data = WL_full_jou_bl))
check_regression_assumptions(lm(hamd17_total_pre ~ intensity_mean_db + sex + age_screening + age_learned_english, data = WL_full_jou_bl))
check_regression_assumptions(lm(hamd17_total_pre ~ speech_rate + sex + age_screening + age_learned_english, data = WL_full_jou_bl))
check_regression_assumptions(lm(hamd17_total_pre ~ medium_pause_duration + sex + age_screening + age_learned_english, data = WL_full_jou_bl))
check_regression_assumptions(lm(hamd17_total_pre ~ sentiment_arousal + sex + age_screening + age_learned_english, data = WL_full_jou_bl))
check_regression_assumptions(lm(hamd17_total_pre ~ sentiment_valence + sex + age_screening + age_learned_english, data = WL_full_jou_bl))
check_regression_assumptions(lm(hamd17_total_pre ~ sentiment_dominance + sex + age_screening + age_learned_english, data = WL_full_jou_bl))
WL_full_jou_bl$fundamental_frequency_mean_wins <- Winsorize(WL_full_jou_bl$fundamental_frequency_mean, probs = c(0.05, 0.95))
#Winsorize speech vars
if (!require(DescTools)) install.packages("DescTools")
# Load the DescTools package
library(DescTools)
WL_full_jou_bl$fundamental_frequency_mean_wins <- Winsorize(WL_full_jou_bl$fundamental_frequency_mean, probs = c(0.05, 0.95))
WL_full_jou_bl$fundamental_frequency_mean_wins <- Winsorize(WL_full_jou_bl$fundamental_frequency_mean, probs = c(0.05, 0.95))
check_ancova_assumptions(lm(hamd17_total_pre ~ fundamental_frequency_mean + sex + age_screening + age_learned_english+testing_location, data = WL_full_jou_bl), WL_full_jou_bl)
library(car)
library(ggpubr)
check_ancova_assumptions <- function(model, data) {
# Ensure the input model is of class 'lm'
if (!inherits(model, "lm")) {
stop("The input model must be of class 'lm'.")
}
# Extract the terms from the model
terms_info <- terms(model)
response_var <- as.character(attr(terms_info, "variables")[-1][attr(terms_info, "response")])
variables <- attr(terms_info, "term.labels")
# Identify factors and covariates used in the model
factors <- variables[sapply(variables, function(v) is.factor(data[[v]]) || is.character(data[[v]]))]
covariates <- variables[!variables %in% factors]
ancova_checks <- list()
for (covariate in covariates) {
for (factor in factors) {
cat("Checking interactions between ", factor, " and ", covariate, "\n", sep = "")
# 1. Homogeneity of Regression Slopes
interaction_term <- paste(factor, covariate, sep = ":")
interaction_model <- update(model, as.formula(paste(". ~ . +", interaction_term)))
interaction_test <- summary(interaction_model)
if (interaction_term %in% rownames(interaction_test$coefficients)) {
interaction_p_value <- interaction_test$coefficients[interaction_term, "Pr(>|t|)"]
interaction_result <- sprintf("Homogeneity of Slopes (Interaction) Test for %s and %s: p-value = %.4f",
factor, covariate, interaction_p_value)
} else {
interaction_result <- sprintf("Interaction term %s not significant.", interaction_term)
}
# 2. Independence of Covariate and Factor
if (is.numeric(data[[covariate]])) {
independence_test <- aov(as.formula(paste(covariate, "~", factor)), data = data)
independence_test_result <- summary(independence_test)[[1]][["Pr(>F)"]][1]
independence_result <- sprintf("Independence of Covariate and Factor (ANOVA) Test for %s and %s: p-value = %.4f",
covariate, factor, independence_test_result)
} else {
independence_result <- sprintf("Covariate %s is not numeric, skipped independence check for %s.", covariate, factor)
}
# Collect results
ancova_checks <- c(ancova_checks, list(interaction_result, independence_result))
# Print the current check results
cat(interaction_result, "\n")
cat(independence_result, "\n\n")
}
}
}
check_ancova_assumptions(lm(hamd17_total_pre ~ fundamental_frequency_mean + sex + age_screening + age_learned_english+testing_location, data = WL_full_jou_bl), WL_full_jou_bl)
check_ancova_assumptions(lm(hamd17_total_pre ~ fundamental_frequency_variance + sex + age_screening + age_learned_english+testing_location, data = WL_full_jou_bl), WL_full_jou_bl)
check_ancova_assumptions(lm(hamd17_total_pre ~ intensity_mean_db + sex + age_screening + age_learned_english+testing_location, data = WL_full_jou_bl), WL_full_jou_bl)
check_ancova_assumptions(lm(hamd17_total_pre ~ medium_pause_duration + sex + age_screening + age_learned_english+testing_location, data = WL_full_jou_bl), WL_full_jou_bl)
